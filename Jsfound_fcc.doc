1. NaN:Not a Number.
2. 驼峰命名法：变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写。
3. Celsius:摄氏度， Fahrenheit:华氏度。

4. 字符串变量 myStr 是不可变的。注意，这 并不 意味着 myStr 永远不能被改变，只是字符串
字面量 string literal 的各个字符不能被改变。改变 myStr 中的唯一方法是重新
给它赋一个值，就像这样：
    var myStr = "Bob";
    myStr = "Job";//重新赋值

5. 使用数组（Array），我们可以在一个地方存储多个数据。
   var sandwich = ["peanut butter", "jelly", "bread"]；//[]内的各个条目以，隔开//

6. .push()函数接受一个或者多个参数，并把它推入到数组的末尾。
   var arr = [1, 2, 3];
   arr.push(4);
   console.log(arr); //输出[1, 2, 3, 4];

   .pop() 函数用来“抛出”一个数组末尾的值,
   我们可以把这个“抛出”的值赋给一个变量存储起来。
   var oneDown = [1, 4, 6].pop();
   //现在 oneDown 的值为 6 ，数组变成了 [1, 4]//

  .shift()函数用来移出array中的第一项，移出的值可以赋给一个新的变量。
  var arr = [1, 2, 3];
  var newArr = arr.shift();
  //arr的值变成了[2, 3], newArr的值为1.//

  .unshift() 函数用起来就像 .push() 函数一样, 但不是在数组的末尾添加元素，
  而是在数组的头部添加元素。

7. 在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个函数（functions）中。
   这是一个函数（function）的例子：
    function functionName() {
      console.log("Hello World");
    }
   你可以通过函数名称functionName加上后面的小括号来调用这个函数（function），
   就像这样：
   functionName();
   每次调用函数时它会打印出消息的“Hello World”到开发的控制台上。所有的大括号之间
   的代码将在每次函数调用时执行。

8. function(param)中的param为形参，可以是一个或多个；在我们调用这个函数时传入的参数
   为实参，实参实际上就是在调用函数时形参的真正的值。function可以多次调用，每次调用
   传入的参数都会决定形参的实际的值。

9. 在 JavaScript 中，作用域（scope）涉及到变量的作用范围。
   在函数外定义的变量具有全局作用域。
   这意味着，具有全局作用域的变量可以在代码的任何地方被调用。
   没有使用var关键字定义的变量，会被自动创建在全局作用域中，形成全局变量。当在代码
   其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。
   因此应该总是使用var关键字来声明变量。

10. 在一个函数内声明的变量，以及该函数的参数都是局部变量，意味着它们只在该函数内可见。
    这是在函数 myTest内声明局部变量loc 的最佳例子：
    function myTest() {
      var loc = "foo";
      console.log(loc);
    }

    myTest(); // "foo"
    console.log(loc); // "undefined"
   在函数外，loc 是未定义的。
   //一个程序中有可能具有相同名称的局部变量和全局变量。在这种情况下，局部变量将会优先于
   全局变量。
