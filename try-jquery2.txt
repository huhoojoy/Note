1 Ajax Basics
1.1 Ajax means: Asynchronous Javascript And XML.
    Ajax是一种实现客户端与服务器互动的技术。
   （A client side technique for communicating with a web server.）
    能够在不刷新已经载入的网页文件的情况下，载入需要载入的文件。

1.2 通常使用jquery实现点击button显示ticket信息如下：
   $('.confirmation').on('click', 'button', function(){
     $(this).closest('.confirmation').find('.ticket').slideDown();
   });
   //使用这种方法的前提是，所有的这些元素已经存在于网页文件中，而只是hidden起来了。//

1.3 使用ajax实现从客户端载入数据如下：
    $('.confirmation').on('click', 'button', function(){
      $.ajax('http://example.org/confirmation.html', {
        success: function(response) { //runs only when the server returns a successful response.//
          $('.ticket').html(response).slideDown();
        }
      });
    });
//Ajax Method: $.ajax(url[, setting]);//
可以使用relative URL替换上述‘url’，即：$.ajax('/confirmation.html');

1.4 Ajax Method 可以简写为：$.get Method.
  $.get(url, success);
  因此上面的代码可以替换为：
      $.get('confirmation.html', function(response) {
        $('.ticket').html(response).slideDown();
      });
      //Equivalent to $.ajax call above.//

####1.5 虽然上述方法可以与客户端互动，获取文件，但是我们上面的代码永远都只能访问
同一个confirmation文件，怎么才能向服务器在不同的情况下请求（request）不同的文件呢？
答案是使用ajax的data方法：
    $('.confirmation').on('click', 'button', function(){
      $.ajax('confirmation.html', {
        success: function(response) {
          $('.ticket').html(response).slideDown();
        },
        data: {'confNum': 1234} //Object(对象文件)//
      });
    });

而通常情况下，请求中所包含的数据（data）都是动态的（dynamic），我们需要从HTML中获取.
    html:
    <div class='ticket' data-confNum='1234'>

    Js:
    $.ajax('confirmation.html', {
      success: function(response) {
        $('.ticket').html(response).slideDown();
      },
      data: {'confNum': $('.ticket').data('confNum')}
    });    //同样指向URL：confirmation.html?confNum=1234//

2 Ajax Options
2.1 当发生error时，可以使用Ajax来处理错误信息：
    $('.confirmation').on('click', 'button', function(){
      $.ajax('confirmation.html', {
        success: function(response) {
          $('.ticket').html(response).slideDown();
        },
        data: {'confNum': 1234}, //Object(对象文件)//
        error: function (request, errorType, errorMessage) {
          alert('Error: ' + errorType + ' with message: ' + errorMessage);
        } //这会在发生error时弹出对话框，提示用户发生的错误信息//
      });
    });
    同样可以在error方法中为特定的元素（图片等）添加html元素，因此上面的alert可以替换
    如下：
    ...
    error:function (request, errorType, errorMessage) {
      $('.photos').html('<li>There was an error occured!</li>');
    }
    ...

2.2 使用timeout来控制timeout speed：
$('.confirmation').on('click', 'button', function(){
  $.ajax('confirmation.html', {
    success: function(response) {
      $('.ticket').html(response).slideDown();
    },
    data: {'confNum': 1234} //Object(对象文件)//
    error: function (request, errorType, errorMessage) {
      alert('Error: ' + errorType + ' with message: ' + errorMessage);
    }, //这会在发生error时弹出对话框，提示用户发生的错误信息//
    timeout: 3000 //1s = 1000ms//
  });
});

2.3 beforeSend 和 complete 回调函数：
    使用这两个函数我们可以为页面内的元素添加css动画：
    ...
    beforeSend: function() {
      $('.confirmation').addClass('is-loading');
    }, //在ajax请求之前运行//
    complete: function() {
      $('.confirmation').removeClass('is-loading');
    } //在success和error方法之后运行//
    ...

2.4 当我们的event handler是针对尚未加载的元素（该元素在ajax请求之后添加到页面已有
元素中），在我们的ajax请求发生之前，event handler将无法工作。此时，我们需要使用
Event Delegation(事件代理)来处理这种情况：
    $('.confirmation .view-boarding-pass').on('click', function(){...});

--->$('.confirmation').on('click', '.view-boarding-pass', function(){...});
    //监听.confirmation内部的click事件，当click事件发生时，
      确认目标是否为.view-boarding-pass//

2.5 Event Delegation(事件代理)：
    当需要为众多的子元素添加事件处理器时，如果逐一添加，那么代码的量将会非常大，而利用
    Js本身特殊的事件冒泡机制，可以将子元素的事件委托给他的父元素，然后将事件处理的函数
    赋给父元素，当事件被触发时，就会执行函数，此时，Js将会检查此子元素是否为所要进行
    事件处理的元素，如果是，就返回函数对其事件的处理结果。

3 JavaScript Objects
  为了减少代码的杂乱，增加代码可读性，便于后期维护，可以使用JS object来使代码更加简洁。
  创建一个JS object：
      var confirmation = {
        init: function() {
        //这里放入事件处理器（event handlers）
        }
      }；
  然后在document ready内部调用confirmation的方法对象：
      $(document).ready(function() {
        confirmation.init();
      });
  //这使得我们更加容易理解在加载文件时究竟发生了什么。//

  尽管我们将event handlers放入到了init()中，但是event handlers内部的代码仍然很难理解，
  因此我们可以将event handlers内部的function部分从init中拉出来，单独放到confirmation
  内部，就像这样：
      var confirmation = {
        init: function() {
          $('.confirmation').on('click', 'button', function() {
            $.ajax('confirmation.html', {...});
          });
          $('.confirmation').on('click', '.view-boarding-pass', function(event) {...});
        }
      };

      $(document).ready(function() {
        confirmation.init();
      });

  改变为：
      var confirmation = {
        init: function() {
          $('.confirmation').on('click', 'button', this.loadConfirmation);
          $('.confirmation').on('click', '.view-boarding-pass', this.showBoardingPass);
        },
        loadConfirmation: function() {
          $.ajax('confirmation.html', {...});
        },
        showBoardingPass: function(event) {...}
      };

      $(document).ready(function() {
        confirmation.init();
      });

4 JavaScript Function
  我们的Object只能够限于一次返回一条信息，如果我们需要返回多条信息，就需要使用function。
    var vacation = {
      init: function() {
        //init vacation
      }
    };
  使用function则如下：
    function Vacation(destination) {
      //init vacation to destination
    }

    $(document).ready(function() {
      var paris = new Vacation('paris');
      var london = new Vacation('london');
    }); //这样就可以多次调用函数，产生多条信息

  function的一个例子：
    function Vacation(destination) {
      this.details = function (){
        console.log(destination);
      }
    }

  调用函数：
    $(document).ready(function() {
      var paris = new Vacation('Paris');
      paris.details();
      var london = new Vacation('London');
      london.details();
    });

将我们的Obj放入可以重复使用的函数中,经过改写如下：
  function Confirmation (el) { // el refers to the element
    this.el = el;  // save a reference to the passed in element
    // helper methods
    this.loadConfirmation = function() {...}
    this.showBoardingPass = function() {...}
    // event handlers
    this.el.on('click', 'button', this.loadConfirmation);
    this.el.on('click', '.view-boarding-pass', this.showBoardingPass);
  }

  //create a new confirmation for each ticket
  $(document).ready(function() {
    var paris = new Confirmation($('#paris'));
    var london = new Confirmation($('#london'));
  })

两个helper methods的内容需要适当改写：
  this.loadConfirmation = function() {
    $.ajax('confirmation.html', {
      timeout: 3000,
      success: function(response) {
        $('.ticket').html(response).slideDown();
      } //但是这样会选中所有的.ticket,而不是我们所点击的那一个。
    });
  }
在.ajax内使用this来指代可以实现对被点击的元素的特指：
    this.ticket.html(response).slideDown();
然而这样的指代并不能达到我们想要的效果，因为我们认为this指代的内容为调用Confirmation时
所传入的元素el，但实际上，这里的this指代已经被ajax改变，变成了指代ajax所设定的内容。
所以这种情况下，正确的使用this的方法应该是：
    首先在helper函数外部声明一个变量：
      var confirmation = this;
    然后在.ajax内增加一个context方法：
      context：confirmation,

    完整的函数应该写成如下：
      function Confirmation(el) {
        this.el = el;
        this.ticket = this.el.find('.ticket');
        var confirmation = this;

        this.loadConfirmation = function() {
          $.ajax('confirmation.html', {
            timeout: 3000,
            context: confirmation, // context使得我们能够在回调函数内部设置this
            success: function(response) {
              this.ticket.html(response).slideDown();
            }
          });
        }
      }

    如果搞不清楚当前的this究竟指代的内容是什么，可以使用console.log()输出this的值到
    控制台，以便查看：
      this.showBoardingPass = function(event) {
        event.preventDefault();
        $('.view-boarding-pass').hide();
        $('.boarding-pass').show();

        console.log(this);
        console.log(confirmation);
      }

    重写为：
      this.showBoardingPass = function(event) {
        event.preventDefault();
        $('this').hide();
        confirmation.el.find('.boarding-pass').show();
      }
